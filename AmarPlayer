import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.io.PrintWriter;

import java.net.Socket;

import java.util.List;

import java.util.ArrayList;
import java.io.*;


public class Player extends Thread

{

    private List<Card> hand = new ArrayList<Card>();

    private int rank;
    
    private Socket socket;

    private String suit;

    private List<Card> play = new ArrayList<Card>();

    private boolean madeMove = false, madeComplete = false, madePass = false;

    

    private BufferedReader input;

    private PrintWriter output;

    

    
 
    public Player (Socket s, int r)

    {
    	System.out.println("inside constructor");
        rank = r;
        socket = s;

        

        try

        {
        	
        	 System.out.println("In player class before input ***");
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new PrintWriter(socket.getOutputStream());
            
            System.out.println("In player class" + input.read());
            output.println("Welcome Player " + input.read());

            
            output.println("Welcome Player " + rank + ". Your cards are " + moveToString(hand));

            output.println("Waiting for other players");

        }

        catch(IOException e)

        {

            System.out.println("No players");

        }

    }

    

    public void addHand(Card c)

    {

        hand.add(c);

    }

    

    public boolean finishedHand()

    {

        return (hand.size() == 0);

    }

    

    public String moveToString(List<Card> move)

    {

        String output = "";

        for(int i=0; i<move.size(); i++)

        {

            output+= move.get(i).toString() + " ";

        }

        return output;

    }

    

    public int getRank()

    { return rank;}

    

    public void run()

    {
    	System.out.println("Player " + rank + " run before try");
        try

        {

            System.out.println("All players connected");

            

            if(rank == 1)

                //enable player's buttons

            

            while(true)

            {
            	
                String command = input.readLine();

                madeMove = false;

                madeComplete = false;

                madePass = false;

                for(int i=0; i<command.length(); i+=2)

                {

                    suit = command.substring(i, i+1);

                    rank = Integer.parseInt(command.substring(i+1, i+2));

                    play.add(new Card(suit, rank));

                }

                if(command.startsWith("MOVE"))

                {

                    command = command.substring(6);

                    madeMove = true;

                    output.println("VALID_MOVE: Player " + rank + " played " + moveToString(play));

        

                    if(finishedHand()/*checks if player finished their hand*/)

                        output.println("Player " + rank + "is done");

                }

                else if(command.startsWith("COMPLETION"))

                {

                    madeComplete = true;

                    output.println("VALID_COMPLETE: Player " + rank + "completed");

                }

                else if(command.startsWith("PASS"))

                {

                    madePass = true;

                    output.println("PASS: Player " + rank + "passed");

                }

                

            }

        }

        catch(IOException e)

        {

            System.out.println("Game Over");

        }

        /*finally

        {

            try

            {

                //socket.close();

            }

            catch(IOException e)

            {

            }

        }*/

        

    }

    

    public void otherPlayerMoved(int playerRank, List<Card> move)

    {

        output.println("OPPONENT_MOVED: Player " + playerRank + " moved " + moveToString(move));

    }



    public boolean returnMove()

    {

        return madeMove;

    }

    public boolean returnComplete()

    {

        return madeComplete;

    }

    public boolean returnPass()

    {

        return madePass;

    }

    public List<Card> getPlay()

    {

        return play;

    }
    public List<Card> getHand()
    {
    	return hand;
    }
    
    public void setSocket(Socket s)
    {
    	System.out.println("Set socket method before");
    	socket = s;
    	System.out.println("Socket port" + socket.getPort());
    }

}
