import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class Player1 extends Thread
	{
		private Socket thisClientSocket;
		private boolean runThread = true;
		private boolean move = false, pass = false, complete = false;
		private int rank;
		private List<Card> hand = new ArrayList<Card>(), play = new ArrayList<Card>();
		private BufferedReader clientIn = null;
		private PrintWriter clientOut = null;
		
		Player1(int r)
		{
			rank = r;
			
		}
		
		public String moveToString(List<Card> move)

	    {
	        String output = "";
	        
	        for(int i=0; i<move.size(); i++)
	        {
	            output+= move.get(i).toString() + " ";
	        }

	        return output;
	    }
		
		public void opponentMoved(String s)
		{
			clientOut.println("OTHER " + s);
		}
		
		public void setSocket(Socket s)
		{
			thisClientSocket = s;
		}
		
		public void addHand(Card c)
		{
			hand.add(c);
		}
		
		public List<Card> getHand()
		{
			return hand;
		}
		
		public boolean getMove()
		{
			return move;
		}
		
		public boolean getComplete()
		{
			return complete;
		}
		
		public boolean getPass()
		{
			return pass;
		}
		
		public List<Card> getPlay()
		{
			return play;
		}
		
		public int getRank()
		{
			return rank;
		}
		
		public void run()
		{
			
			System.out.println("Accepted Client Address - " + thisClientSocket.getInetAddress().getHostName());
			try
			{
				clientIn = new BufferedReader(new InputStreamReader(thisClientSocket.getInputStream()));
				clientOut = new PrintWriter(new OutputStreamWriter(thisClientSocket.getOutputStream()));
				
				clientOut.println("HAND " + moveToString(hand));
				
				while(runThread)
				{
					String command = clientIn.readLine();
					System.out.println("Client says: " + command);
					sleep(10000);
					
					/*if(!server1.getServerOn())
					{
						System.out.println("Server has been stopped already");
						clientOut.println("Server has stopped");
						clientOut.flush();
						runThread = false;
					}*/
					
					if(command.startsWith("MOVE"))
					{
						move = true;
						command = command.substring(5);
						while(command.length()>1)
						{
							play.add(new Card(command.substring(0, 1), Integer.parseInt(command.substring(1, command.indexOf(" ")))));
							command= command.substring(command.indexOf(" ") + 1);
						}
					}
					else if(command.startsWith("COMPLETE"))
					{
						complete = true;
						command = command.substring(9);
						while(command.length()>1)
						{
							play.add(new Card(command.substring(0, 1), Integer.parseInt(command.substring(1, command.indexOf(" ")))));
							command= command.substring(command.indexOf(" ") + 1);
						}
					}
					else if(command.startsWith("PASS"))
					{
						pass = true;
						
					}
					
					
					clientOut.flush();
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				try
				{
					clientIn.close();
					clientOut.close();
					thisClientSocket.close();
					System.out.println("Everything stopped");
					
				}
				catch(IOException ioe)
				{
					ioe.printStackTrace();
				}
			}
		}
	}
