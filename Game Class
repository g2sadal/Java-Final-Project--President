import java.util.List;
import java.util.ArrayList;

public class Game 
{
	private boolean firstGame;
    private int currentTurn;
    private Card[] deck;
    private List<Card> pile;
    private Player player1, player2, player3, player4;

    /**
     * Constructor for objects of class Game
     */
    public Game()
    {
        firstGame = true;
        deck = new Card[52]; 
        discard = new ArrayList<Card>();
        pile = new ArrayList<Card>(); 
        
        int value = 0;
        
        while(value < 16)
        {
        	for(int i = 0; i < deck.length; i += 13)
        	{
        		deck[i] = new Card("Diamond", value);
        	}
        	value++;
        }
        
        for(int j = 0; j < deck.length; j++)
        {
        	if(j < 14)
        	{
        		deck[j].setSuit("Hearts");
        	}
        	else if(j < 27)
        	{
        		deck[j].setSuit("Clubs");
        	}
        	else if(j < 40)
        	{
        		deck[j].setSuit("Spades");
        	}
        }
       
    }
    public void mouseClicked(MouseEvent arg) 
		{
			complete();
				
		}
		
		public boolean complete()
		{
			int countPile = 0;
			
			int countPlayerHand = 0;
			
			int total = 0;
			
			Card currentCard = pile.get(pile.size()-1);
			for( int i = pile.size(); i > pile.size() - 4; i--)
			{
				if(currentCard == pile.get(i-1))
				{
					countPile += 1;
				}
			}
			if (countPile!= 0) 
			{
				for( int i = 0; i < hand.size(); i++)
				{
					if(hand.get(i).equals(currentCard))
					{
						countPlayerHand +=1;
					}
				}
				total = countPlayerHand + countPile;
				
				if(total != 4)
				{
					return false;
				}
				
				return true;
			}
		}
    public void shuffle()
    {
    	for(int i = 0; i < deck.length; i++)
    	{
    		int index = (int)(Math.random() * deck.length);
    		Card temp = deck[i];
    		deck[i] = deck[index];
    		deck[index] = temp;	
    	}
    }
    
    public void deal(Player p1, Player p2, Player p3, Player p4)
    {
    	for(int i = 0; i < deck.length; i += 4)
    	{
    		p1.addHand(deck[i]);
    		p2.addHand(deck[i+1]);
    		p3.addHand(deck[i+2]);
    		p4.addHand(deck[i+3]);
    	}
    }
    
    public void print()
    {
    	for(int i = 0; i < deck.length; i++)
    	{
    		System.out.print(deck[i].toString());
    	}
    	
    	shuffle();
    	
    	for(int i = 0; i < deck.length; i++)
    	{
    		System.out.println(deck[i].toString());
    	}
    }
    
    public Player setPlayer1(Player p1)
    {
    	player1 = p1;
	return player1;
    }
    public Player setPlayer2(Player p2)
    {
    	player2 = p2;
	return player2;
    }
    public Player setPlayer3(Player p3)
    {
    	player3 = p3;
	return player3;
    }
    public Player setPlayer4(Player p4)
    {
    	player4 = p4;
	return player4;
    }
    public synchronized boolean validMove(List<Cards> move, Player player)
    {
    	 boolean sameCard = true;
	 for(int i=0; i<move.size()-1; i++)
	 {
	 	if(move.get(i)!=move.get(i+1))
			sameCard=false;
	 }
	 if(sameCard && player.getRank()==currentPlayer && move.get(i).compareTo(pile.get(2))>0)
	 {

		for(Card card: move)
		{
			pile.add(card);
		}
		
		if(move.get(i).getValue()==15)
			pile.removeRange(0, pile.size()-1);
			
		while(pile.size()>3)
		{
			pile.remove(0);
		}
		currentPlayer++;
		return true;
	 }
	 return false;
    }
}
